module simple_pipline(
  input clock,
  input reset,
  input exec,
  input [15:0] outside_input,
  
  output [15:0] program_counter,
  output [15:0] instruction_register,
  output [15:0] data_register,
  output [15:0] ins_mem_read_data,
  output [15:0] data_mem_read_data,
  output [15:0] data_for_write_out,
  output [15:0] data_for_output,
  output clock_out, reset_out,
  output [15:0] register0, register1, register2, register3, register4, register5, register6, register7);

  assign data_for_write_out = data_for_res;
  // assign phase = phase_counter;
  // assign program_counter = program_counter_wire;
  assign instruction_register = instruction_register_wire;
  assign ins_mem_read_data = data_from_rom_wire;
  assign data_mem_read_data =  memory_data;
  assign data_register = data_register_wire;
  assign clock_out = clock;
  assign reset_out = reset;

  wire [15:0] data_from_rom_wire;
  wire [15:0] mem_address;
  wire [15:0] ar,br;

  
  wire [15:0] instruction_register_wire;
  wire [15:0] instruction_register_wire23;
  wire [15:0] program_counter_pre_wire1;
  wire [15:0] program_counter_pre_wire2;
  wire [15:0] data_register_wire;
  wire [3:0] cond_wire;
  wire [15:0] memory_data_register_wire;
  wire [15:0] data_for_res;

  // wire op_mem_src;
  wire op_branch;
  wire [1:0] op_alu_src_a;
  wire [1:0] op_alu_src_b;
  wire [3:0] op_alu;
  wire op_data_for_output_update;
  wire op_mem_write;
  wire op_mdr;
  wire op_reg_write;
  wire op_reg_write_address;
  wire op_res;
  wire state;

  wire op_mem_write34;
  wire op_reg_write34;
  wire op_reg_write_address34;
  wire op_mem_read34;
  wire op_mdr34;
  wire op_res34;

  wire [15:0] memory_data;
  wire [15:0] input_data;

  wire [15:0] data_register_wire45;
  wire op_reg_write45;
  wire op_reg_write_address45;
  wire op_res45; 

  wire ar_wire;


  
  
  
  instruction_memory instruction_memory(
    	.address(program_counter_pre_wire1),
	    .clock(clock),
	    .q(data_from_rom_wire)
  );

  data_memory data_memory(
    .address(data_register_wire),
    .clock(clock),
    .data(ar_wire),
    .wren(op_mem_write34),
    .q(memory_data)
  );



  fetch_p1 fetch_p1 (
    .clock(clock),
    .reset(reset),
    .op_branch(op_branch),  
    .data_from_rom(data_from_rom_wire),
    .data_for_res(data_for_res),

    // .program_counter(program_counter_wire),
    .program_counter_pre(program_counter_pre_wire1),
    .instruction_register(instruction_register_wire));

  decode_p2 decode_p2 (
    // input
    .clock(clock), 
	  .reset(reset),
    .exec(exec),
    .cond(cond_wire),
    .instruction_register_wire(instruction_register_wire),
    .data_for_write(data_for_res),
    // .program_counter(program_counter_wire),
    .program_counter_pre_in(program_counter_pre_wire1),
  
    // output
	  .ar(ar),
	  .br(br),
	  .r0(register0), 
    .r1(register1), 
    .r2(register2), 
    .r3(register3), 
    .r4(register4), 
    .r5(register5), 
    .r6(register6), 
    .r7(register7),

    .op_branch(op_branch),
    .op_alu_src_a(op_alu_src_a),
    .op_alu_src_b(op_alu_src_b),
    .op_alu(op_alu),
    .op_data_for_output_update(op_data_for_output_update),
    .op_mem_write(op_mem_write),
    .op_mem_read(op_mem_read),
    .op_mdr(op_mdr),
    .op_res(op_res),
    .state(state),
    // .program_counter,
    .program_counter_pre(program_counter_pre_wire2),
    .instruction_register(instruction_register_wire23));
  
  execute_p3 execute_p3 ( 
    // input
    .clock(clock),
    .reset(reset),
    .state(state),
    .ar(ar),
    .br(br),
    .program_counter_pre(program_counter_pre_wire2),
    .instruction_register(instruction_register_wire23),
    .outside_input(outside_input),
    .op_alu_src_a(op_alu_src_a),
    .op_alu_src_b(op_alu_src_b),
    .op_alu(op_alu),
    .op_data_for_output_update(op_data_for_output_update),
    .op_mem_write_in(op_mem_write),
    .op_reg_write_in(op_reg_write),
    .op_reg_write_address_in(op_reg_write_address),
    .op_mem_read_in(op_mem_read),
    .op_mdr_in(op_mdr),
    .op_res_in(op_res),
    .input_data(input_data),

    // output
    .data_for_output(data_for_output),
    .data_register_wire(data_register_wire),
    .cond(cond_wire),

    .op_mem_write(op_mem_write34),
    .op_reg_write(op_reg_write34),
    .op_reg_write_address(op_reg_write_address34),
    .op_mem_read(op_mem_read34),
    .op_mdr(op_mdr34),
    .op_res(op_res34),
    .ar_out(ar_wire));

  mem_access_p4 mem_access_p4 (
    // input
    .clock(clock),
    .reset(reset),
    .state(state),
    .op_mdr(op_mdr34),
    .data_bus(memory_data),
    .outside_input(input_data),
    .data_register_wire(data_register_wire),
    .op_reg_write_in(op_reg_write34),
    .op_reg_write_address_in(op_reg_write_address34),
    .op_res_in(op_res34),
    .op_mem_read(op_mem_read34),

    // output
    .memory_data_register_wire(memory_data_register_wire),
    .data_register(data_register_wire45),
    .op_reg_write(op_reg_write45),
    .op_reg_write_address(op_reg_write_address45),
    .op_res(op_res45));
    
  write_back write_back (
    .data_register(data_register_wire45),
    .memory_data_register(memory_data_register_wire),
    .op_res(op_res45),
    .data_for_res(data_for_res));

endmodule